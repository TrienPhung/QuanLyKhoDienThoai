package View.Panel;

import View.Component.IntegratedSearch;
import View.Component.MainFunction;
import java.awt.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import View.Component.PanelBorderRadius;
import View.Component.itemTaskbar;
import View.Dialog.ThuocTinhSanPham.DungLuongRamDialog;
import View.Dialog.ThuocTinhSanPham.DungLuongRomDialog;
import View.Dialog.ThuocTinhSanPham.HeDieuHanhDialog;
import View.Dialog.ThuocTinhSanPham.MauSacDialog;
import View.Dialog.ThuocTinhSanPham.ThuongHieuDialog;
import View.Dialog.ThuocTinhSanPham.XuatXuDialog;
import View.Main;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.Normalizer;

public class QuanLyThuocTinhSP extends JPanel {

    // Modern Colors
    private static final Color BACKGROUND_PRIMARY = new Color(102, 126, 234);
    private static final Color BACKGROUND_SECONDARY = new Color(118, 75, 162);
    private static final Color BACKGROUND_LIGHT = new Color(250, 250, 250);
    private static final Color CARD_BACKGROUND = Color.WHITE;
    private static final Color TEXT_PRIMARY = new Color(30, 41, 59);
    private static final Color TEXT_SECONDARY = new Color(100, 116, 139);
    private static final Color ACCENT_COLOR = new Color(102, 126, 234);
    private static final Color HOVER_COLOR = new Color(248, 250, 252);

    // Components
    private JPanel headerPanel, contentPanel, statsPanel, searchPanel, gridPanel;
    private JTextField searchField;
    private ModernCard[] cards;
    private JLabel titleLabel, subtitleLabel;
    private Timer animationTimer;
    private Main m;

    // Data - Thay ƒë·ªïi t·ª´ emoji sang SVG icons
    private String[] icons = {"brand_100px.svg", "factory_100px.svg", "os_100px.svg", "ram_100px.svg", "rom_100px.svg", "color_100px.svg"};
    private String[] titles = {"Th∆∞∆°ng hi·ªáu", "Xu·∫•t x·ª©", "H·ªá ƒëi·ªÅu h√†nh", "RAM", "ROM", "M√†u s·∫Øc"};
    private String[] descriptions = {
        "Qu·∫£n l√Ω danh s√°ch c√°c th∆∞∆°ng hi·ªáu s·∫£n ph·∫©m c√¥ng ngh·ªá h√†ng ƒë·∫ßu",
        "Theo d√µi ngu·ªìn g·ªëc s·∫£n ph·∫©m t·ª´ c√°c qu·ªëc gia v√† khu v·ª±c",
        "Danh s√°ch h·ªá ƒëi·ªÅu h√†nh v√† phi√™n b·∫£n t∆∞∆°ng th√≠ch",
        "C√°c m·ª©c dung l∆∞·ª£ng RAM t·ª´ c∆° b·∫£n ƒë·∫øn cao c·∫•p",
        "B·ªô nh·ªõ trong v√† t√πy ch·ªçn m·ªü r·ªông cho s·∫£n ph·∫©m",
        "B·∫£ng m√†u phong ph√∫ v·ªõi c√°c t√πy ch·ªçn hi·ªán ƒë·∫°i"
    };
    private int[] counts = {0, 0, 0, 0, 0, 0}; // S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ database

    public QuanLyThuocTinhSP(Main m) {
        this.m = m;
        loadDataCounts(); // Load s·ªë l∆∞·ª£ng t·ª´ database
        initComponents();
        setupLayout();
        addEventListeners();
        startAnimations();
    }

    // Method ƒë·ªÉ load s·ªë l∆∞·ª£ng t·ª´ database
    private void loadDataCounts() {
        try {
            // Gi·∫£ s·ª≠ b·∫°n c√≥ c√°c DAO ƒë·ªÉ truy xu·∫•t d·ªØ li·ªáu
            // counts[0] = thuongHieuDAO.getCount();
            // counts[1] = xuatXuDAO.getCount();
            // counts[2] = heDieuHanhDAO.getCount();
            // counts[3] = ramDAO.getCount();
            // counts[4] = romDAO.getCount();
            // counts[5] = mauSacDAO.getCount();

            // T·∫°m th·ªùi s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh, b·∫°n c√≥ th·ªÉ thay th·∫ø b·∫±ng code th·ª±c t·∫ø
            counts[0] = getDatabaseCount("thuong_hieu");
            counts[1] = getDatabaseCount("xuat_xu");
            counts[2] = getDatabaseCount("he_dieu_hanh");
            counts[3] = getDatabaseCount("ram");
            counts[4] = getDatabaseCount("rom");
            counts[5] = getDatabaseCount("mau_sac");
        } catch (Exception e) {
            // N·∫øu c√≥ l·ªói, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
            counts = new int[]{15, 12, 8, 6, 10, 20};
        }
    }

    // Method ƒë·ªÉ l·∫•y s·ªë l∆∞·ª£ng t·ª´ database (b·∫°n c·∫ßn implement theo h·ªá th·ªëng c·ªßa m√¨nh)
    private int getDatabaseCount(String tableName) {
        // ƒê√¢y l√† v√≠ d·ª•, b·∫°n c·∫ßn thay th·∫ø b·∫±ng logic truy xu·∫•t database th·ª±c t·∫ø
        // Connection conn = DatabaseConnection.getConnection();
        // PreparedStatement stmt = conn.prepareStatement("SELECT COUNT(*) FROM " + tableName);
        // ResultSet rs = stmt.executeQuery();
        // return rs.next() ? rs.getInt(1) : 0;

        // T·∫°m th·ªùi return gi√° tr·ªã gi·∫£ l·∫≠p
        switch (tableName) {
            case "thuong_hieu":
                return 15;
            case "xuat_xu":
                return 12;
            case "he_dieu_hanh":
                return 8;
            case "ram":
                return 6;
            case "rom":
                return 10;
            case "mau_sac":
                return 20;
            default:
                return 0;
        }
    }

    // Method ƒë·ªÉ refresh d·ªØ li·ªáu
    public void refreshData() {
        loadDataCounts();
        updateCards();
        updateStats();
    }

    private void updateCards() {
        if (cards != null) {
            for (int i = 0; i < cards.length; i++) {
                cards[i].updateCount(counts[i]);
            }
        }
    }

    private void updateStats() {
        if (statsPanel != null) {
            Component[] components = statsPanel.getComponents();
            if (components.length > 1 && components[1] instanceof StatCard) {
                StatCard totalCard = (StatCard) components[1];
                int total = 0;
                for (int count : counts) {
                    total += count;
                }
                totalCard.updateValue(String.valueOf(total));
            }
        }
    }

    private void initComponents() {
        setBackground(BACKGROUND_LIGHT);
        setLayout(new BorderLayout());

        // Header Panel - Gi·∫£m chi·ªÅu cao t·ª´ 180 xu·ªëng 120
        headerPanel = new GradientPanel();
        headerPanel.setPreferredSize(new Dimension(0, 120));
        headerPanel.setLayout(new BorderLayout());

        JPanel headerContent = new JPanel(new GridBagLayout());
        headerContent.setOpaque(false);
        GridBagConstraints gbc = new GridBagConstraints();

        // Gi·∫£m font size c·ªßa title t·ª´ 36 xu·ªëng 28
        titleLabel = new JLabel("üöÄ Qu·∫£n l√Ω Thu·ªôc t√≠nh");
        titleLabel.setFont(new Font("Inter", Font.BOLD, 28));
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);

        // Gi·∫£m font size c·ªßa subtitle t·ª´ 16 xu·ªëng 14
        subtitleLabel = new JLabel("H·ªá th·ªëng qu·∫£n l√Ω hi·ªán ƒë·∫°i cho s·∫£n ph·∫©m c√¥ng ngh·ªá");
        subtitleLabel.setFont(new Font("Inter", Font.PLAIN, 14));
        subtitleLabel.setForeground(new Color(255, 255, 255, 200));
        subtitleLabel.setHorizontalAlignment(SwingConstants.CENTER);

        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(0, 0, 8, 0);
        headerContent.add(titleLabel, gbc);
        gbc.gridy = 1;
        gbc.insets = new Insets(0, 0, 0, 0);
        headerContent.add(subtitleLabel, gbc);

        headerPanel.add(headerContent, BorderLayout.CENTER);

        // Content Panel
        contentPanel = new JPanel(new BorderLayout());
        contentPanel.setBackground(BACKGROUND_LIGHT);
        contentPanel.setBorder(new EmptyBorder(20, 40, 30, 40)); // Gi·∫£m padding top t·ª´ 30 xu·ªëng 20

        // Stats Panel
        setupStatsPanel();

        // Search Panel
        setupSearchPanel();

        // Grid Panel
        setupGridPanel();

        // Add components to content
        JPanel topPanel = new JPanel(new BorderLayout());
        topPanel.setBackground(BACKGROUND_LIGHT);
        topPanel.add(statsPanel, BorderLayout.NORTH);
        topPanel.add(searchPanel, BorderLayout.CENTER);

        contentPanel.add(topPanel, BorderLayout.NORTH);
        contentPanel.add(gridPanel, BorderLayout.CENTER);

        add(headerPanel, BorderLayout.NORTH);
        add(contentPanel, BorderLayout.CENTER);
    }

    private void setupStatsPanel() {
        statsPanel = new JPanel(new GridLayout(1, 4, 20, 0));
        statsPanel.setBackground(BACKGROUND_LIGHT);
        statsPanel.setBorder(new EmptyBorder(0, 0, 25, 0)); // Gi·∫£m padding t·ª´ 30 xu·ªëng 25

        String[] statLabels = {"Nh√≥m thu·ªôc t√≠nh", "T·ªïng m·ª•c con", "ƒê·ªô ch√≠nh x√°c", "Ho·∫°t ƒë·ªông"};
        String[] statValues = {"6", calculateTotalItems(), "99%", "24/7"};

        for (int i = 0; i < 4; i++) {
            JPanel statCard = new StatCard(statValues[i], statLabels[i]);
            statsPanel.add(statCard);
        }
    }

    private String calculateTotalItems() {
        int total = 0;
        for (int count : counts) {
            total += count;
        }
        return String.valueOf(total);
    }

    private void setupSearchPanel() {
        searchPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        searchPanel.setBackground(BACKGROUND_LIGHT);
        searchPanel.setBorder(new EmptyBorder(0, 0, 25, 0));

        JPanel searchContainer = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2d.setColor(Color.WHITE);
                g2d.fillRoundRect(0, 0, getWidth(), getHeight(), 25, 25);
                g2d.setColor(new Color(226, 232, 240));
                g2d.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, 25, 25);
            }
        };
        searchContainer.setLayout(new BorderLayout());
        searchContainer.setPreferredSize(new Dimension(400, 50));
        searchContainer.setOpaque(false);
        searchContainer.setBorder(new EmptyBorder(0, 20, 0, 20));

        JLabel searchIcon = new JLabel("üîç");
        searchIcon.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 16));
        searchIcon.setBorder(new EmptyBorder(0, 0, 0, 10));

        searchField = new JTextField();
        searchField.setFont(new Font("Inter", Font.PLAIN, 14));
        searchField.setBorder(null);
        searchField.setOpaque(false);
        searchField.setForeground(TEXT_SECONDARY);
        searchField.setText("T√¨m ki·∫øm thu·ªôc t√≠nh nhanh...");

        searchContainer.add(searchIcon, BorderLayout.WEST);
        searchContainer.add(searchField, BorderLayout.CENTER);

        searchPanel.add(searchContainer);
    }

    private void setupGridPanel() {
        gridPanel = new JPanel(new GridLayout(2, 3, 25, 25));
        gridPanel.setBackground(BACKGROUND_LIGHT);

        cards = new ModernCard[6];
        for (int i = 0; i < 6; i++) {
            cards[i] = new ModernCard(icons[i], titles[i], descriptions[i], counts[i], i);
            gridPanel.add(cards[i]);
        }
    }

    private void addEventListeners() {
        // Search functionality
        searchField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (searchField.getText().equals("T√¨m ki·∫øm thu·ªôc t√≠nh nhanh...")) {
                    searchField.setText("");
                    searchField.setForeground(TEXT_PRIMARY);
                }
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                if (searchField.getText().isEmpty()) {
                    searchField.setText("T√¨m ki·∫øm thu·ªôc t√≠nh nhanh...");
                    searchField.setForeground(TEXT_SECONDARY);
                }
            }
        });

        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterCards(searchField.getText().toLowerCase());
            }
        });
    }

    public static String normalizeString(String input) {
        String normalized = Normalizer.normalize(input, Normalizer.Form.NFD);
        return normalized.replaceAll("\\p{InCombiningDiacriticalMarks}+", "")
                .toLowerCase()
                .trim();
    }

    private void filterCards(String searchTerm) {
        String normalizedSearch = normalizeString(searchTerm);

        for (ModernCard card : cards) {
            String normalizedTitle = normalizeString(card.getTitle());
            boolean visible = searchTerm.isEmpty()
                    || searchTerm.equals("t√¨m ki·∫øm thu·ªôc t√≠nh nhanh...")
                    || normalizedTitle.contains(normalizedSearch);
            card.setVisible(visible);
        }
        gridPanel.revalidate();
        gridPanel.repaint();
    }

    private void startAnimations() {
        // ƒê·∫£m b·∫£o t·∫•t c·∫£ cards ban ƒë·∫ßu ƒë·ªÅu ·∫©n
        for (ModernCard card : cards) {
            card.setInitialAlpha(0.0f);
        }
        
        // Fade in animation for cards v·ªõi delay gi·ªØa c√°c card
        Timer fadeInTimer = new Timer(150, new ActionListener() { // TƒÉng delay t·ª´ 100ms l√™n 150ms
            int cardIndex = 0;

            public void actionPerformed(ActionEvent e) {
                if (cardIndex < cards.length) {
                    cards[cardIndex].startFadeIn();
                    cardIndex++;
                } else {
                    ((Timer) e.getSource()).stop();
                }
            }
        });
        
        // Th√™m delay ban ƒë·∫ßu ƒë·ªÉ ƒë·∫£m b·∫£o UI ƒë√£ render xong
        fadeInTimer.setInitialDelay(300);
        fadeInTimer.start();
    }

    private void setupLayout() {
        setBorder(new EmptyBorder(0, 0, 0, 0));
    }

    // Custom Components
    private class GradientPanel extends JPanel {

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            GradientPaint gradient = new GradientPaint(
                    0, 0, BACKGROUND_PRIMARY,
                    getWidth(), getHeight(), BACKGROUND_SECONDARY
            );
            g2d.setPaint(gradient);
            g2d.fillRect(0, 0, getWidth(), getHeight());
        }
    }

    private class StatCard extends JPanel {

        private String value, label;
        private float alpha = 0.0f;

        public StatCard(String value, String label) {
            this.value = value;
            this.label = label;
            setBackground(CARD_BACKGROUND);
            setPreferredSize(new Dimension(200, 100)); // Gi·∫£m chi·ªÅu cao t·ª´ 100 xu·ªëng 80

            Timer fadeIn = new Timer(20, new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    alpha = Math.min(1.0f, alpha + 0.05f);
                    repaint();
                    if (alpha >= 1.0f) {
                        ((Timer) e.getSource()).stop();
                    }
                }
            });
            fadeIn.setInitialDelay(500);
            fadeIn.start();
        }

        public void updateValue(String newValue) {
            this.value = newValue;
            repaint();
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha));

            // Draw rounded background
            g2d.setColor(CARD_BACKGROUND);
            g2d.fillRoundRect(0, 0, getWidth(), getHeight(), 20, 20);

            // Draw shadow
            g2d.setColor(new Color(0, 0, 0, 20));
            g2d.fillRoundRect(2, 2, getWidth() - 2, getHeight() - 2, 20, 20);

            // Draw content - ƒëi·ªÅu ch·ªânh v·ªã tr√≠ cho ph√π h·ª£p v·ªõi chi·ªÅu cao m·ªõi
            g2d.setColor(ACCENT_COLOR);
            g2d.setFont(new Font("Inter", Font.BOLD, 28)); // Gi·∫£m font size t·ª´ 32 xu·ªëng 28
            FontMetrics fm = g2d.getFontMetrics();
            int valueWidth = fm.stringWidth(value);
            g2d.drawString(value, (getWidth() - valueWidth) / 2, getHeight() / 2 + 3);

            g2d.setColor(TEXT_SECONDARY);
            g2d.setFont(new Font("Inter", Font.BOLD, 11)); // Gi·∫£m font size t·ª´ 12 xu·ªëng 11
            fm = g2d.getFontMetrics();
            int labelWidth = fm.stringWidth(label.toUpperCase());
            g2d.drawString(label.toUpperCase(), (getWidth() - labelWidth) / 2, getHeight() / 2 + 22);
        }
    }

    private class ModernCard extends JPanel {

        private String iconPath, title, description;
        private int count, index;
        private boolean isHovered = false;
        private float hoverProgress = 0f;
        private float alpha = 0.0f; // B·∫Øt ƒë·∫ßu v·ªõi alpha = 0
        private Timer hoverTimer;
        private FlatSVGIcon svgIcon;

        public ModernCard(String iconPath, String title, String description, int count, int index) {
            this.iconPath = iconPath;
            this.title = title;
            this.description = description;
            this.count = count;
            this.index = index;
            this.alpha = 0.0f; // ƒê·∫£m b·∫£o b·∫Øt ƒë·∫ßu v·ªõi alpha = 0

            // T·∫°o SVG icon v·ªõi k√≠ch th∆∞·ªõc 50x50
            try {
                this.svgIcon = new FlatSVGIcon("./Icons/" + iconPath, 50, 50);
            } catch (Exception e) {
                System.err.println("Kh√¥ng th·ªÉ t·∫£i icon: " + iconPath);
                this.svgIcon = null;
            }

            setOpaque(false);
            setPreferredSize(new Dimension(300, 200));
            setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

            addMouseListener(new MouseAdapter() {
                @Override
                public void mouseEntered(MouseEvent e) {
                    if (alpha > 0.8f) { // Ch·ªâ cho ph√©p hover khi card ƒë√£ hi·ªÉn th·ªã g·∫ßn nh∆∞ ho√†n to√†n
                        isHovered = true;
                        startHoverAnimation();
                    }
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    isHovered = false;
                    startHoverAnimation();
                }

                @Override
                public void mousePressed(MouseEvent e) {
                    if (alpha > 0.8f) { // Ch·ªâ cho ph√©p click khi card ƒë√£ hi·ªÉn th·ªã
                        openDialog(index);
                    }
                }
            });
        }

        // Th√™m method ƒë·ªÉ set alpha ban ƒë·∫ßu
        public void setInitialAlpha(float alpha) {
            this.alpha = alpha;
            repaint();
        }

        public void updateCount(int newCount) {
            this.count = newCount;
            repaint();
        }

        public void startFadeIn() {
            // ƒê·∫£m b·∫£o alpha b·∫Øt ƒë·∫ßu t·ª´ 0
            this.alpha = 0.0f;
            
            Timer fadeIn = new Timer(25, new ActionListener() { // Gi·∫£m interval ƒë·ªÉ animation m∆∞·ª£t h∆°n
                public void actionPerformed(ActionEvent e) {
                    alpha = Math.min(1.0f, alpha + 0.08f); // Gi·∫£m increment ƒë·ªÉ animation ch·∫≠m h∆°n
                    repaint();
                    if (alpha >= 1.0f) {
                        ((Timer) e.getSource()).stop();
                    }
                }
            });
            fadeIn.start();
        }

        private void startHoverAnimation() {
            if (hoverTimer != null && hoverTimer.isRunning()) {
                hoverTimer.stop();
            }

            hoverTimer = new Timer(16, new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (isHovered && hoverProgress < 1f) {
                        hoverProgress += 0.1f;
                        if (hoverProgress > 1f) {
                            hoverProgress = 1f;
                        }
                        repaint();
                    } else if (!isHovered && hoverProgress > 0f) {
                        hoverProgress -= 0.1f;
                        if (hoverProgress < 0f) {
                            hoverProgress = 0f;
                        }
                        repaint();
                    }

                    if (hoverProgress == 0f || hoverProgress == 1f) {
                        ((Timer) e.getSource()).stop();
                    }
                }
            });
            hoverTimer.start();
        }

        @Override
        protected void paintComponent(Graphics g) {
            // Ch·ªâ v·∫Ω khi alpha > 0
            if (alpha <= 0.0f) {
                return;
            }
            
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha));

            int shadowOffset = (int) (hoverProgress * 3);
            int elevation = (int) (hoverProgress * 6);

            // Shadow
            if (isHovered && alpha > 0.8f) {
                g2d.setColor(new Color(0, 0, 0, (int)(30 * alpha)));
                g2d.fillRoundRect(2, 6, getWidth() - 4, getHeight() - 8, 24, 24);
            } else {
                g2d.setColor(new Color(0, 0, 0, (int)(10 * alpha)));
                g2d.fillRoundRect(1, 2, getWidth() - 2, getHeight() - 4, 24, 24);
            }

            // Card background
            g2d.setColor(CARD_BACKGROUND);
            g2d.fillRoundRect(0, 0, getWidth() - shadowOffset, getHeight() - shadowOffset - elevation, 24, 24);

            // Hover border
            if (hoverProgress > 0 && alpha > 0.8f) {
                g2d.setColor(new Color(
                        ACCENT_COLOR.getRed(),
                        ACCENT_COLOR.getGreen(),
                        ACCENT_COLOR.getBlue(),
                        (int) (hoverProgress * 255 * alpha)
                ));
                g2d.setStroke(new BasicStroke(2));
                g2d.drawRoundRect(
                        0,
                        0,
                        getWidth() - shadowOffset - 1,
                        getHeight() - shadowOffset - elevation - 1,
                        24,
                        24
                );
            }

            // Count badge
            g2d.setColor(new Color(102, 126, 234, (int)(50 * alpha)));
            g2d.fillRoundRect(getWidth() - 80, 15, 65, 25, 20, 20);
            g2d.setColor(new Color(ACCENT_COLOR.getRed(), ACCENT_COLOR.getGreen(), ACCENT_COLOR.getBlue(), (int)(255 * alpha)));
            g2d.setFont(new Font("Inter", Font.BOLD, 11));
            g2d.drawString(count + " m·ª•c", getWidth() - 75, 30);

            // SVG Icon
            if (svgIcon != null) {
                int iconX = (getWidth() - svgIcon.getIconWidth()) / 2;
                int iconY = 40;
                
                // T·∫°o composite cho icon v·ªõi alpha
                Composite originalComposite = g2d.getComposite();
                g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha));
                svgIcon.paintIcon(this, g2d, iconX, iconY);
                g2d.setComposite(originalComposite);
            }

            // Title
            g2d.setColor(new Color(TEXT_PRIMARY.getRed(), TEXT_PRIMARY.getGreen(), TEXT_PRIMARY.getBlue(), (int)(255 * alpha)));
            g2d.setFont(new Font("Inter", Font.BOLD, 18));
            FontMetrics fm = g2d.getFontMetrics();
            int titleWidth = fm.stringWidth(title);
            g2d.drawString(title, (getWidth() - titleWidth) / 2, 115);

            // Description
            g2d.setColor(new Color(TEXT_SECONDARY.getRed(), TEXT_SECONDARY.getGreen(), TEXT_SECONDARY.getBlue(), (int)(255 * alpha)));
            g2d.setFont(new Font("Inter", Font.PLAIN, 13));
            drawCenteredString(g2d, description, getWidth() / 2, 140, getWidth() - 40);
        }

        private void drawCenteredString(Graphics2D g2d, String text, int x, int y, int width) {
            FontMetrics fm = g2d.getFontMetrics();
            String[] words = text.split(" ");
            StringBuilder line = new StringBuilder();
            int lineHeight = fm.getHeight();
            int currentY = y;

            for (String word : words) {
                String testLine = line.length() > 0 ? line + " " + word : word;
                if (fm.stringWidth(testLine) > width && line.length() > 0) {
                    int lineWidth = fm.stringWidth(line.toString());
                    g2d.drawString(line.toString(), x - lineWidth / 2, currentY);
                    line = new StringBuilder(word);
                    currentY += lineHeight;
                } else {
                    line = new StringBuilder(testLine);
                }
            }
            if (line.length() > 0) {
                int lineWidth = fm.stringWidth(line.toString());
                g2d.drawString(line.toString(), x - lineWidth / 2, currentY);
            }
        }

        public String getTitle() {
            return title;
        }

        public String getDescription() {
            return description;
        }
    }

    private void openDialog(int index) {
        JFrame owner = (JFrame) SwingUtilities.getWindowAncestor(this);

        switch (index) {
            case 0:
                new ThuongHieuDialog(owner, this, "Qu·∫£n l√Ω th∆∞∆°ng hi·ªáu", true, m.user.getManhomquyen()).setVisible(true);
                break;
            case 1:
                new XuatXuDialog(owner, this, "Qu·∫£n l√Ω xu·∫•t x·ª© s·∫£n ph·∫©m", true, m.user.getManhomquyen()).setVisible(true);
                break;
            case 2:
                new HeDieuHanhDialog(owner, this, "Qu·∫£n l√Ω h·ªá ƒëi·ªÅu h√†nh", true, m.user.getManhomquyen()).setVisible(true);
                break;
            case 3:
                new DungLuongRamDialog(owner, this, "Qu·∫£n l√Ω dung l∆∞·ª£ng RAM", true, m.user.getManhomquyen()).setVisible(true);
                break;
            case 4:
                new DungLuongRomDialog(owner, this, "Qu·∫£n l√Ω dung l∆∞·ª£ng ROM", true, m.user.getManhomquyen()).setVisible(true);
                break;
            case 5:
                new MauSacDialog(owner, this, "Qu·∫£n l√Ω m√†u s·∫Øc", true, m.user.getManhomquyen()).setVisible(true);
                break;
        }

        // Refresh d·ªØ li·ªáu sau khi ƒë√≥ng dialog
        SwingUtilities.invokeLater(() -> {
            refreshData();
            });
    }
}